This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T10:55:21.670Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app.py
Master.csv
Suppliers.csv

================================================================
Repository Files
================================================================

================
File: app.py
================
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go

# Set page config
st.set_page_config(
    page_title="Material Acquisitions - Transactions Generator",
    page_icon="üìä",
    layout="wide"
)

# Add custom CSS
st.markdown("""
    <style>
        .stApp {
            max-width: 1200px;
            margin: 0 auto;
        }
        .stTabs [data-baseweb="tab-list"] {
            gap: 24px;
        }
        .stTabs [data-baseweb="tab"] {
            height: 50px;
            padding: 0 24px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
    </style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    try:
        master_df = pd.read_csv('Master.csv')
        suppliers_df = pd.read_csv('Suppliers.csv')
        
        # Validate required columns
        required_master_columns = ['Item #', 'Name', 'CATEGORY', 'Commodity']
        required_supplier_columns = ['Item #', 'Supplier name', 'Supplier price']
        
        if not all(col in master_df.columns for col in required_master_columns):
            st.error(f"Master.csv is missing required columns: {required_master_columns}")
            return None, None
            
        if not all(col in suppliers_df.columns for col in required_supplier_columns):
            st.error(f"Suppliers.csv is missing required columns: {required_supplier_columns}")
            return None, None
            
        # Remove any rows with missing values in required columns
        master_df = master_df.dropna(subset=required_master_columns)
        suppliers_df = suppliers_df.dropna(subset=required_supplier_columns)
        
        # Validate that we have matching items
        matching_items = set(master_df['Item #']) & set(suppliers_df['Item #'])
        if not matching_items:
            st.error("No matching items found between Master.csv and Suppliers.csv")
            return None, None
            
        st.success(f"Found {len(matching_items)} valid items for transaction generation")
        
        return master_df, suppliers_df
    except FileNotFoundError:
        st.error("Please make sure Master.csv and Suppliers.csv are in the same directory as the script.")
        return None, None
    except Exception as e:
        st.error(f"Error loading data: {str(e)}")
        return None, None

def generate_quantity(category, commodity):
    if commodity in ['Hardware', 'Screws']:
        return np.random.randint(100, 1000)
    elif commodity in ['Structural Products', 'Drywall']:
        return np.random.randint(50, 600)
    else:
        return np.random.randint(20, 500)
    

def main():
    st.title("üìä Material Acquisitions - Transactions Generator")
    st.markdown("Generate realistic transaction data for analysis")

   
        
        # Add How to Use section
    with st.expander("üìñ How to Use", expanded=False):
            st.markdown("""
            ### Quick Guide
            
            1. **Upload Data Files**
            - Ensure `Master.csv` and `Suppliers.csv` are in the application directory
            - Files must contain required columns (Item #, Name, Category, etc.)
            
            2. **Configure Settings ‚öôÔ∏è**
            - **Start & End Date**: Select your desired date range
            - **Min/Max Transactions**: Set the range of transactions per day
            - **Transaction Probability**: Chance of transactions occurring on any day
            
            3. **Generate & Analyze üìà**
            - Click "Generate Transactions" to create your dataset
            - View data in three different tabs:
                - **Preview**: Raw transaction data
                - **Monthly Trends**: Time-based analysis
                - **Category Analysis**: Category distribution
            
            4. **Export Results üì•**
            - Use the "Download CSV" button to save your generated data
            
            ### Tips
            - Higher transaction probability means more frequent transactions
            - Wider min/max range creates more varied daily transaction counts
            - Check the statistics in the charts for insights into your generated data
            
            ### Required CSV Formats
            **Master.csv must include:**
            ```
            Item #, Name, CATEGORY, Commodity
            ```
            
            **Suppliers.csv must include:**
            ```
            Item #, Supplier name, Supplier price
            ```
            """)
            
            # Add sample data format
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### Sample Master.csv format:")
                st.code("""
    Item #,Name,CATEGORY,Commodity
    V1000,Metal Stud,FRAMING/DRYWALL,Structural
    V1005,Track Metal,FRAMING/DRYWALL,Structural
                """.strip())
                
            with col2:
                st.markdown("#### Sample Suppliers.csv format:")
                st.code("""
    Item #,Supplier name,Supplier price
    V1000,Supplier A,10.99
    V1000,Supplier B,9.99
                """.strip())

        # Rest of your existing code...
    
    # Load Data
    master_df, suppliers_df = load_data()
    if master_df is None or suppliers_df is None:
        return
    
    # Settings in an expander
    with st.expander("‚öôÔ∏è Settings", expanded=True):
        
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input(
                "Start Date",
                datetime(2022, 1, 1),
                key="start_date",
                help="Select the start date for transaction generation"
            )
        with col2:
            end_date = st.date_input(
                "End Date",
                datetime(2024, 3, 31),
                key="end_date",
                help="Select the end date for transaction generation"
            )
        
        col3, col4, col5 = st.columns(3)
        with col3:
            min_trans = st.number_input(
                "Min Transactions/Day",
                min_value=1,
                max_value=100,
                value=5,
                help="Minimum number of transactions per day"
            )
        with col4:
            max_trans = st.number_input(
                "Max Transactions/Day",
                min_value=1,
                max_value=100,
                value=15,
                help="Maximum number of transactions per day"
            )
        with col5:
            prob = st.slider(
                "Transaction Probability (%)",
                min_value=0,
                max_value=100,
                value=70,
                help="Probability of transactions occurring on any given day"
            )

    # Generate button and transaction generation logic
    if st.button("üöÄ Generate Transactions", type="primary", use_container_width=True):
        transactions = []
        current_date = start_date
        
        # Progress bar
        progress_text = "Generating transactions..."
        progress_bar = st.progress(0)
        total_days = (end_date - start_date).days
        
        with st.spinner(progress_text):
            for day_count, _ in enumerate(range(total_days + 1)):
                if np.random.random() <= prob/100:
                    num_transactions = np.random.randint(min_trans, max_trans)
                    
                    # Get valid items (those that have suppliers)
                    valid_items = master_df[master_df['Item #'].isin(suppliers_df['Item #'].unique())]
                    
                    for _ in range(num_transactions):
                        try:
                            # Sample from valid items only
                            item = valid_items.sample(1).iloc[0]
                            
                            # Get all suppliers for this item
                            available_suppliers = suppliers_df[
                                suppliers_df['Item #'] == item['Item #']
                            ]
                            
                            if not available_suppliers.empty:
                                supplier = available_suppliers.sample(1).iloc[0]
                                quantity = generate_quantity(item['CATEGORY'], item['Commodity'])
                                
                                transactions.append({
                                    'Transaction Date': current_date.strftime('%Y-%m-%d'),
                                    'Item #': item['Item #'],
                                    'Item Name': item['Name'],
                                    'Supplier': supplier['Supplier name'],
                                    'Quantity': quantity,
                                    'Unit Price': supplier['Supplier price'],
                                    'Total Amount': quantity * supplier['Supplier price'],
                                    'Category': item['CATEGORY'],
                                    'Commodity': item['Commodity']
                                })
                        except Exception as e:
                            st.error(f"Error generating transaction: {str(e)}")
                            continue
                
                current_date += timedelta(days=1)
                # Update progress bar
                progress_bar.progress((day_count + 1) / (total_days + 1))

                # Continue inside the generate button click handler
        if transactions:  # Only proceed if we have transactions
            transactions_df = pd.DataFrame(transactions)
            st.session_state.transactions_df = transactions_df
            
            # Success message with statistics
            st.success(f"Generated {len(transactions)} transactions across {total_days + 1} days!")
            
            # Display tabs
            # Display tabs
            tab1, tab2, tab3 = st.tabs(["üìã Preview", "üìà Monthly Trends", "üìä Category Analysis"])
            
            with tab1:
                st.dataframe(
                    transactions_df.style.format({
                        'Unit Price': '${:.2f}',
                        'Total Amount': '${:.2f}'
                    }),
                    use_container_width=True,
                    height=400
                )
                
            with tab2:
                # Create monthly stats with renamed columns
                monthly_stats = (
                    transactions_df.groupby(
                        pd.to_datetime(transactions_df['Transaction Date']).dt.strftime('%Y-%m')
                    ).agg({
                        'Transaction Date': 'count',
                        'Total Amount': 'sum'
                    })
                    .rename(columns={
                        'Transaction Date': 'Count',
                        'Total Amount': 'Amount'
                    })
                    .reset_index()
                    .rename(columns={
                        'Transaction Date': 'Month'
                    })
                )
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=monthly_stats['Month'],
                    y=monthly_stats['Count'],
                    name='Transaction Count',
                    line=dict(color='#4f46e5', width=3)
                ))
                fig.add_trace(go.Scatter(
                    x=monthly_stats['Month'],
                    y=monthly_stats['Amount'],
                    name='Total Amount ($)',
                    line=dict(color='#ef4444', width=3),
                    yaxis='y2'
                ))
                
                fig.update_layout(
                    title='Monthly Transaction Trends',
                    yaxis=dict(
                        title='Transaction Count',
                        gridcolor='rgba(0,0,0,0.1)'
                    ),
                    yaxis2=dict(
                        title='Total Amount ($)',
                        overlaying='y',
                        side='right',
                        gridcolor='rgba(0,0,0,0.1)'
                    ),
                    plot_bgcolor='white',
                    hovermode='x unified',
                    showlegend=True,
                    height=600,
                    xaxis=dict(
                        gridcolor='rgba(0,0,0,0.1)',
                        tickangle=45
                    ),
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
            with tab3:
                # Category Analysis
                col1, col2 = st.columns(2)
                
                with col1:
                    # Create category stats with renamed columns
                    category_stats = (
                        transactions_df.groupby('Category')
                        .agg({
                            'Transaction Date': 'count',
                            'Total Amount': 'sum'
                        })
                        .rename(columns={
                            'Transaction Date': 'Count',
                            'Total Amount': 'Amount'
                        })
                        .reset_index()
                    )
                    
                    fig = px.bar(
                        category_stats,
                        x='Category',
                        y='Count',
                        title='Transaction Count by Category',
                        color='Category',
                        height=400
                    )
                    fig.update_layout(
                        xaxis_title="Category",
                        yaxis_title="Number of Transactions",
                        plot_bgcolor='white',
                        xaxis=dict(tickangle=45)
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    fig = px.pie(
                        category_stats,
                        values='Amount',
                        names='Category',
                        title='Total Amount by Category',
                        height=400
                    )
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig, use_container_width=True)
            
            # Download section
            st.markdown("---")
            col1, col2 = st.columns([3, 1])
            with col1:
                st.info("Your transaction data is ready for download!")
            with col2:
                st.download_button(
                    "üì• Download CSV",
                    transactions_df.to_csv(index=False).encode('utf-8'),
                    f"transactions_{start_date}_to_{end_date}.csv",
                    "text/csv",
                    use_container_width=True
                )
        else:
            st.warning("No transactions were generated. Please check your data and try again.")

if __name__ == "__main__":
    main()

================
File: Master.csv
================
Item #,Name,Description,Price,Item type,Status,Commodity,Tax,Uom,External reference,Documents,CATEGORY,Manufacturer,Part number,,,,
V1000,"Stud Metal, 3-5/8"", 10', 20 Ga, 16"" OC","Stud Metal, 3-5/8"", 10', 20 Ga, 16"" OC", 7.64 ,goods,active,Structural Products,,EA,,,FRAMING/DRYWALL,ProSTUD,1324124,,,,
V1005,"Track, Metal 3-5/8"" 10', 20 GA, 16"" OC Galvanized","Track, Metal 3-5/8"" 10', 20 GA, 16"" OC Galvanized", 7.57 ,goods,active,Structural Products,,EA,,,FRAMING/DRYWALL,ProTRAK,1324126,,,,
V1010,"Drywall 4' X 10' X 5/8"" Fire Rated","Drywall 4' X 10' X 5/8"" Fire Rated", 20.40 ,goods,active,Drywall,,EA,,,FRAMING/DRYWALL,,,,,,
V1015,"Mud, Drywall Plus-3, Bucket, 5 Gal","Mud, Drywall Plus-3, Bucket 5 Gal", 23.00 ,goods,active,Drywall Joint Compound,,EA,,,FRAMING/DRYWALL,,,,,,
V1020,"Mud Drywall, All-Purpose, Bucket, 5 Gal","Mud Drywall, All-Purpose, Bucket, 5 Gal", 23.00 ,goods,active,Drywall Joint Compound,,EA,,,FRAMING/DRYWALL,,,,,,
V1025,"Screw, Drywall, 1-1/4"" Self-Tapping, Per Pound","Screw, Dry Wall, 1-1/4"" Self-Tapping, Per Pound", 3.40 ,goods,active,Drywall screws,,LB,,,FRAMING/DRYWALL,Grip Fast 25LB Box,229253125,,,,
V1030,"Ceiling Grid, 12', Armstrong, White, 15/16""","Ceiling Grid, 12', Armstrong, White, 15/16""", 8.88 ,goods,active,Ceiling materials,,EA,,,CEILING,,,,,,
V1035,"Screw, Metal Stud, Pan Head, Self Tapping, Per Pound","Screw, Metal Stud, Pan Head, Self Tapping, Per Pound", 3.60 ,goods,active,Drywall screws,,LB,,,FRAMING/DRYWALL,,,,,,
V1040,"Tape, 2"" Blue, Painters, 60 YD Roll","Tape, 2"" Blue, 60 YD Roll", 6.55 ,goods,active,Paper tapes,,EA,,,PAINT/WALL,,,,,,
V1055,"Drywall 4' X 8' 1/2"" Light Weight","Drywall 4' X 8' 1/2"" Light Weight", 9.22 ,goods,active,Drywall,,EA,,,FRAMING/DRYWALL,,1311223,,,,
V1060,Sheeting 6' X 100' 6-mil Black Poly,Sheeting 6' X 100' 6-mil Black Poly, 32.03 ,goods,active,Cleaning & Maintenance,,EA,,,PAINT/WALL,Polar Plastics,5680295,,,,
V1065,"Spring Clamp 1"" Metal","Spring Clamp 1"" Metal", 0.87 ,goods,active,Hardware,,EA,,,PAINT/WALL,Top Shop,2491303,,,,
V1070,"Duct Tape 1.88"" X 55 YD Multi-Use - 3 Pack","Duct Tape 1.88"" X 60 YD Multi-Use - 3 Pack", 9.78 ,goods,active,Tape,,EA,,,PAINT/WALL,IPG,5642017,,,,
V1080,"Screw Concrete Tapcon 3/16"" x 1-1/4"" Hex Drive Washer Head 25/Count","Screw Concrete Tapcon 3/16"" x 1-1/4"" Hex Drive Washer Head  25/Count", 7.98 ,goods,active,Screws,,EA,,,FRAMING/DRYWALL,Tapcon,2326973,,,,
V1085,"Screw Teks #8 x 3/4"" Pan Head Self-Drilling Metal to Metal 240 Count","Screw Teks #8 x 3/4"" Pan Head Self-Drilling Metal to Metal 240 Count", 8.43 ,goods,active,Screws,,EA,,,FRAMING/DRYWALL,Teks,2328111,,,,
V1090,"Tape Painters Blue 1.41"" x 60 YD 3M Scotch Tape - 6 Pack","Tape Painters Blue 1.41"" x 60 YD 3M Scotch Tape - 6 Pack", 31.13 ,goods,active,Tape,,EA,,,PAINT/WALL,3m,5641009,,,,
V1100,"Tape Painters 1.41"" X 60 YD Delicate Surface - Roll","Tape Painters 1.41"" X 60 YD Delicate Surface - Roll", 7.96 ,goods,active,Tape,,EA,,,PAINT/WALL,3M,5641001,,,,
V1110,"Drywall 4' X 8' 5/8"" Fire-Rated","Drywall 4' X 8' 5/8"" Fire-Rated", 15.36 ,goods,active,Drywall,,EA,,,FRAMING/DRYWALL,,58,,,,
V1200,"Pipe sewer PVC 4"" x 10' ","Pipe sewer PVC 4"" x 10' ", 31.10 ,goods,active,Drain pipe odor suppression device,,EA,,,PLUMBING,NA,P40PP10,,,,
V1075,"Drill Bit Masonry 5/32"" x 3-1/2"" Flat Shank Hex Hammer Drill Bit","Drill Bit Masonry 5/32"" x 3-1/2"" Flat Shank Hex Hammer Drill Bit", 2.48 ,goods,active,Hardware,,EA,,,FRAMING/DRYWALL,Bosch,2522610,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,

================
File: Suppliers.csv
================
Item #,SupplierUom,Supplier name,Supplier price,Supplier currency,Supplier lead time,Supplier tax code,Manufacturer,Part number
V1000,SF,L&W Supply,10.09,USD,7,,,
V1000,SF,United Building Materials,7.64,USD,7,,,
V1000,SF,Lowes,11.68,USD,7,,,
V1000,SF,Interior Supply,6.2,USD,7,,,
V1000,SF,Menards,9.83,USD,7,,ProSTUD,1324124
V1005,SF,United Building Materials,7.57,USD,7,,,
V1005,SF,Lowes,10.2,USD,7,,,
V1005,SF,L&W Supply,10.01,USD,7,,,
V1005,SF,Menards,13.16,USD,7,,ProTRAK,1324126
V1005,SF,Interior Supply,6.1,USD,7,,,
V1010,EA,Menards,17.65,USD,7,,,
V1010,EA,United Building Materials,20.4,USD,7,,,
V1010,EA,Lowes,26.25,USD,7,,,
V1010,EA,L&W Supply,21,USD,7,,,
V1010,EA,Interior Supply,19.4,USD,7,,,
V1015,EA,United Building Materials,23,USD,7,,,
V1015,EA,Menards,18.98,USD,7,,,
V1015,EA,Lowes,18.98,USD,7,,,
V1015,EA,L&W Supply,27.1,USD,7,,,
V1015,EA,Interior Supply,21.5,USD,7,,,
V1020,EA,Menards,21,USD,7,,,
V1020,EA,Lowes,21,USD,7,,,
V1020,EA,Interior Supply,21.5,USD,7,,,
V1020,EA,United Building Materials,23,USD,7,,,
V1020,EA,L&W Supply,27.1,USD,7,,,
V1025,BX 5LB,Lowes,2.2,USD,7,,,
V1025,BX 5LB,United Building Materials,3.4,USD,7,,,
V1025,BX 5LB,Menards,44.48,USD,7,,Grip Fast 25LB Box,229253125
V1030,SF,Lowes,8.88,USD,7,,,
V1030,SF,Interior Supply,9.6,USD,7,,,
V1035,INCL,Lowes,2.2,USD,7,,,
V1035,INCL,United Building Materials,3.6,USD,7,,,
V1035,INCL,Menards,3.2,USD,7,,,
V1040,,Interior Supply,6.55,USD,7,,,
V1040,,United Building Materials,7,USD,7,,,
V1040,,Lowes,7.98,USD,7,,,
V1055,EA,Menards,9.22,USD,7,,,1311223
V1060,LF,Menards,32.03,USD,7,,Polar Plastics,5680295
V1065,,Menards,0.87,USD,7,,Top Shop,2491303
V1070,,Menards,9.78,USD,7,,IPG,5642017
V1080,,Menards,7.98,USD,7,,Tapcon,2326973
V1085,,Menards,8.43,USD,7,,Teks,2328111
V1090,,Menards,31.13,USD,7,,3m,5641009
V1100,,Menards,7.96,USD,7,,3M,5641001
V1110,EA,Interior Supply,15.36,USD,7,,,58
V1200,LF,Ferguson Enterprises,31.1,USD,7,,NA,P40PP10
V1075,,Menards,2.48,USD,7,,Bosch,2522610
